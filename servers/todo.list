

SDK 后续优化
===================

整理一遍参数列表
    房间和玩家的顺序统一

优化换房间连接策略,记录当前服务器地址,如果换房间发现地址一致,则不需要断开

miniapp实现

demo用sdk的EventEmitter

匹配参数工厂
    SelfNotTeamMatch
    SelfFixedTeamMatch
    GroupRoomNotTeamMatch
    GroupRoomFixedTeamMatch

demo剥离并实现:
    情况区分:
        1~99 自定义房间+匹配房间. 所有人可控制游戏开关
        1v1 自定义房间+匹配房间. 由首个进入房间的人控制游戏开关, 实现自定义状态, 要求都准备了才能开始
        3v3 自定义房间+匹配房间. 由首个进入房间的人控制游戏开关, 实现自定义状态, 要求都准备了才能开始
        同队伍组队(3max)+匹配3v3. 由首个进入房间的人控制游戏开关, 实现自定义状态, 要求都准备了才能开始

    大厅入口整合
        多人游戏: 创建房间|匹配游戏
        1v1游戏: 创建房间|匹配游戏
        两队对战: 创建房间|匹配游戏|创建组队(3max的房间)|加入组队(模拟邀请)
        固定3v3游戏: 创建房间|匹配游戏|创建组队(3max的房间)|加入组队(模拟邀请)

    界面预制体:
        房间UI
            是否显示房间匹配按钮
            匹配按钮事件点击处理器
            匹配按钮文本
        游戏UI
            是否显示游戏控制按钮
    
    场景管理器
        控制游戏的玩家范围:第一个玩家id,或者所有
        玩家进入和退出都刷新界面的相关控制

demo:本地保存token和过期时间到cookie的实现,返回前验证一下剩下8H以内,就要重新获取
    断线重连一直失败时会有内存泄漏


单元测试覆盖
缺少一个myPlayerInfo
+Mini
    同时使用多平台支持的案例
文档更新
    提供SDK使用说明

提供一个服务端SDK
    一个异步获取token和playerId的方法


匹配相关优化
=======================
removePlayer实现
指定固定队伍匹配器实现
自由队伍匹配器实现
    demo:实现组队进入乱斗游戏,游戏结束回到组队

房间匹配,退出后还有几秒在跳,感觉不太正常,需要排查

内存泄漏检查
=======================
通过)单人匹配请求
固定队伍匹配请求
自由队伍匹配请求
房间操作:创建/加入/消息/同步/频繁进入和退出/解散房间等
同步操作要单独走一个


新增应用: 通知应用匹配请求任务(队列接收)
    方便是其他语言的web端后台新增应用后,可以直接通知到匹配集群


匹配集群动态调配应用匹配任务
    应该改成每秒处理请求,作为性能依据
    将超过配置上限的服务器，应用分一些给其他服务器


帧同步数据同步验证模块
    发现有攻击的追帧数据时，卡死追帧会有没生效！怀疑是物理碰撞问题，改成 setTimeout 0 来追帧？
    


帧同步冲突策略
=======================
    输入+修改数据字典
    每个输入帧都有一个修改数据字典,或者修改


redis和db的配置独立成文件


完整游戏制作
===============================
乱斗,淘汰机制
技能:普通攻击,跳斩,闪现





vm2 来实现服务端SDK应用自定义包的运行接入
=====================================
https://www.npmjs.com/package/vm2


参考其他同类项目
=====================================
https://fish-networking.gitbook.io/docs/
https://www.colyseus.io/



机器人支持
=====================
服务端填充
定义一个分配规则,或者都发给所有客户端,由客户端自行决定分配规则
    如果断开重新触发分配规则
各接口支持指定玩家,服务端判断是机器人并且是分配给当前客户端控制的,则通过,走正常流程(所有下发逻辑验证一遍是否有写死的)